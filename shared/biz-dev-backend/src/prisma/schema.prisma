// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

generator zod {
  provider                         = "pnpm dlx zod-prisma-types"
  writeBarrelFiles                 = true // default is true
  createInputTypes                 = false // default is true
  createModelTypes                 = true // default is true
  addInputTypeValidation           = false // default is true
  addIncludeType                   = false // default is true
  addSelectType                    = false // default is true
  validateWhereUniqueInput         = true // default is true
  createOptionalDefaultValuesTypes = false // default is false
  createRelationValuesTypes        = false // default is false
  createPartialTypes               = true // default is false
  useDefaultValidators             = false // default is true
  coerceDate                       = true // default is true
  writeNullishInModelTypes         = true // default is false
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id            String          @id @default(cuid())
  userId        String
  empNo         String
  name          String?
  password      String
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  Authorization Authorization[]
  ProjectUser   ProjectUser[]

  @@unique(name: "loginInfo", [userId, empNo])
}

model Project {
  id          String        @id @default(cuid())
  name        String
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  CodeEntity  CodeEntity[]
  Task        ProjectTask[]
  ProjectRole ProjectRole[]
  ProjectUser ProjectUser[]
}

model ProjectUser {
  id        String @id @default(cuid())
  userId    String
  projectId String
  roleId    String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  User    User    @relation(fields: [userId], references: [id])
  Project Project @relation(fields: [projectId], references: [id])
}

model Resource {
  id            String          @id @default(cuid())
  name          String
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  Authorization Authorization[]
}

model ProjectRole {
  id   String @id @default(cuid())
  name String

  projectId String
  project   Project @relation(fields: [projectId], references: [id])

  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  Authorization Authorization[]
}

model ProjectTask {
  id   String @id @default(cuid())
  name String

  projectId String
  project   Project  @relation(fields: [projectId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ProjectTaskStatus {
  id                 String                  @id @default(cuid())
  name               String
  createdAt          DateTime                @default(now())
  updatedAt          DateTime                @updatedAt
  TaskTransitionFrom ProjectTaskTransition[] @relation("from")
  TaskTransitionTo   ProjectTaskTransition[] @relation("to")
}

model ProjectTaskTransition {
  id        String   @id @default(cuid())
  fromId    String
  toId      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  from ProjectTaskStatus @relation("from", fields: [fromId], references: [id])
  to   ProjectTaskStatus @relation("to", fields: [toId], references: [id])
}

model Authorization {
  id     String  @id @default(cuid())
  userId String?
  roleId String?

  resourceUri String

  read   Boolean
  write  Boolean
  delete Boolean
  update Boolean

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  User        User?        @relation(fields: [userId], references: [id])
  ProjectRole ProjectRole? @relation(fields: [roleId], references: [id])
  Resource    Resource     @relation(fields: [resourceUri], references: [id])
}

model CodeEntity {
  id        String      @id @default(cuid())
  name      String
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  CodeValue CodeValue[]

  Project   Project? @relation(fields: [projectId], references: [id])
  projectId String?
}

model CodeAttribute {
  id         String   @id @default(cuid())
  name       String
  dataType   String // string, number, date, boolean
  isRequired Boolean  @default(true)
  isArray    Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  CodeValue CodeValue[]
}

model CodeValue {
  id              String   @id @default(cuid())
  value           String
  codeAttributeId String
  codeEntityId    String
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  CodeAttribute CodeAttribute @relation(fields: [codeAttributeId], references: [id])
  CodeEntity    CodeEntity    @relation(fields: [codeEntityId], references: [id])
}

model CommonUser {
  userId         String @id
  userName       String
  nickname       String
  companyCode    String
  companyName    String
  departmentCode String
  departmentName String
  authority      String // || separated string array
  projects       String // || separated string array
}

model CommonProject {
  pjtUid           Int      @id @default(autoincrement())
  pjtNo            String
  pjtNm            String
  pjtMngRId        String
  rpnDepCd         String
  pgsStatCd        String
  staYmd           String
  endYmd           String
  isTplEnabled     Boolean
  isSubGrpEnabled  Boolean
  isDeleted        Boolean
  creator          Int?     @default(0)
  createdDate      DateTime @default(now())
  lastModifiedUser Int?     @default(0)
  lastModifiedDate DateTime @updatedAt
}
